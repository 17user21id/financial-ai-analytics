from dataclasses import dataclass
from typing import Optional, Dict, Any
from datetime import datetime
from ..common.enums import AccountType


@dataclass
class Account:
    """Represents an account in the accounts table"""

    account_id: Optional[int] = None  # Auto-generated by database
    name: str = ""
    category_path: Optional[str] = None
    sub_category: Optional[str] = None
    type: AccountType = AccountType.REVENUE
    sub_type: Optional[int] = None  # RevenueSubType, ExpenseSubType, or DerivedSubType
    is_summary: bool = False
    is_derived: bool = False
    description: Optional[str] = None
    is_active: bool = True
    created_at: Optional[datetime] = None
    updated_at: Optional[datetime] = None

    def to_dict(self) -> Dict[str, Any]:
        """Convert to dictionary for database storage"""
        return {
            "account_id": self.account_id,
            "name": self.name,
            "category_path": self.category_path,
            "sub_category": self.sub_category,
            "type": self.type.value,
            "sub_type": self.sub_type,
            "is_summary": self.is_summary,
            "is_derived": self.is_derived,
            "description": self.description,
            "is_active": self.is_active,
            "created_at": self.created_at,
            "updated_at": self.updated_at,
        }

    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> "Account":
        """Create from dictionary"""
        return cls(
            account_id=data.get("account_id"),
            name=data["name"],
            category_path=data.get("category_path"),
            sub_category=data.get("sub_category"),
            type=AccountType(data.get("type", 1)),
            sub_type=data.get("sub_type"),
            is_summary=data.get("is_summary", False),
            is_derived=data.get("is_derived", False),
            description=data.get("description"),
            is_active=data.get("is_active", True),
            created_at=data.get("created_at"),
            updated_at=data.get("updated_at"),
        )
