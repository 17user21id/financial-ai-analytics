from dataclasses import dataclass
from typing import Optional, Dict, Any
from datetime import datetime
from decimal import Decimal
from ..common.enums import DerivedSubType, DataSource, Currency


@dataclass
class FinanceTransaction:
    """Represents a transaction in the finance_transactions table"""

    tx_id: Optional[int] = None  # Auto-generated by database
    account_id: int = 0
    period_start: str = ""
    period_end: str = ""
    value: Decimal = Decimal("0.00")
    currency: Currency = Currency.USD
    derived_sub_type: Optional[DerivedSubType] = None
    posted_date: Optional[datetime] = None
    created_by: Optional[str] = None
    notes: Optional[str] = None
    source_id: DataSource = DataSource.PL_REPORT  # New field for data source

    def to_dict(self) -> Dict[str, Any]:
        """Convert to dictionary for database storage"""
        return {
            "tx_id": self.tx_id,
            "account_id": self.account_id,
            "period_start": self.period_start,
            "period_end": self.period_end,
            "value": float(self.value),
            "currency": self.currency.value,
            "derived_sub_type": (
                self.derived_sub_type.value if self.derived_sub_type else None
            ),
            "posted_date": self.posted_date,
            "created_by": self.created_by,
            "notes": self.notes,
            "source_id": self.source_id.value,
        }

    @classmethod
    def from_dict(cls, data: Dict[str, Any]) -> "FinanceTransaction":
        """Create from dictionary"""
        return cls(
            tx_id=data.get("tx_id"),
            account_id=data["account_id"],
            period_start=data["period_start"],
            period_end=data["period_end"],
            value=Decimal(str(data["value"])),
            currency=Currency(data.get("currency", 1)),
            derived_sub_type=(
                DerivedSubType(data["derived_sub_type"])
                if data.get("derived_sub_type")
                else None
            ),
            posted_date=data.get("posted_date"),
            created_by=data.get("created_by"),
            notes=data.get("notes"),
            source_id=DataSource(data.get("source_id", 1)),
        )
